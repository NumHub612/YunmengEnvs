# ===============================================================================
# 项目描述
# ===============================================================================
TITLE: 1D Burgers Equation used for example.
  This demo test the basic IO functions.

# ===============================================================================
# 全局配置
# ===============================================================================
GENERAL:
  # 输出路径
  output_path: ./output
  # 日志等级
  log_level: INFO

# ===============================================================================
# 空间域配置
# ===============================================================================
SPATIAL:
  # 网格类型
  mesh_type: GRID1D
  # 网格区域
  mesh_domain:
    x: [0, 2*pi]
  # 网格配置
  mesh_configs:
    nx: 401
  # 区域定义
  zones:
    - name: &zone1 zone1
      type: cell
      range: "x = 0.5*pi"
    - name: &zone2 zone2
      type: face
      range: "x = 1.5*pi"

# ===============================================================================
# 时间域配置
# ===============================================================================
TEMPORAL:
  # 时间步数
  time_steps: 100
  # 时间单位
  time_unit: s
  # 时间配置
  time_configs:
    nu: 0.07

# ===============================================================================
# 数据集配置
# ===============================================================================
DATASET:
  # 时间序列
  timeseries:
    - name: &ts1 timeseries1
      timestamps: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  # 曲线数据
  curves:
    - name: &curve1 curve1
      x_data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      y_data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  # 场数据
  fields:
    - name: &field1 field1
      domain: cell
      values: "./data/field1.csv"

# ===============================================================================
# 求解器配置
# ===============================================================================
SOLVER:
  # 时间积分方法
  time_integrator: EULER
  # 时间积分配置
  time_integrator_config:
    # 时间步长
    dt: 0.001
  # 有限差分方法
  fdc_method:
    # 差分求解器名称
    - name: &fdc fdc
      configs:
        # 差分精度
        epsilon: 0.01
        # 最大迭代次数
        max_iter: 1000

# ===============================================================================
# 问题配置
# ===============================================================================
PROBLEM:
  # 问题方程组
  equations:
    - name: Burgers
      eq: "ddt(u) + u * grad(u) = nu * laplacian(u)"
  # 常量定义
  constants:
    nu: 0.07
  # 变量定义
  vars:
    - name: &phi phi
      field: scalar
      domain: cell
      unit: null
    - name: &u u
      field: vector
      domain: cell
      unit: m/s
    - name: &s s
      field: scalar
      domain: cell
      unit: m
    - name: &z z
      field: scalar
      domain: face
      unit: m
    - name: &q q
      field: scalar
      domain: face
      unit: m^3/s
  # 初始条件
  ics:
    - var: *phi
      eq: "phi = exp(-(x - 4 * t)^2 / (4 * nu * (t + 1))) + exp(-(x - 4 * t - 2 * pi)^2 / (4 * nu * (t + 1)))"
    - var: *u
      eq: "u = -2 * nu * grad(phi) / phi + 4"
      priority: 1
    - var: *u
      eq: "u = 0"
      zone: *zone1
      priority: 2
    - var: *s
      value: 0.0
    - var: *z
      value: 0.0
    - var: *q
      value: 0.0
  # 边界条件
  bcs:
    - bc1:
        var: *u
        location: *zone1
        type: periodic
        eq: "u = -2 * nu * grad(phi) / phi + 4"
    - bc2:
        var: *u
        location: *zone2
        type: periodic
        eq: "u = -2 * nu * grad(phi) / phi + 4"
    - bc3:
        var: [*z, *q]
        type: custom
        eq: "z + 2 * q = 0"
    - bc4:
        var: *s
        type: neumann
        eq: "grad(s) = 0"

# ===============================================================================
# 输出配置
# ===============================================================================
OUTPUT:
  # 全局设置
  global_settings:
    # 输出格式
    output_format: csv
    # 输出频率
    output_freq: 100
  # 输出项
  output_items:
    - name: *u
      file_name: u.csv
